"""
PersonaAgent - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ª–∏—á–Ω–æ—Å—Ç–µ–π –¥–ª—è Telegram-–∞–∫–∫–∞—É–Ω—Ç–æ–≤
"""

import json
import logging
import random
import re
from typing import Dict, Any, Optional
from openai import OpenAI
from config import settings

logger = logging.getLogger(__name__)


class PersonaAgent:
    """
    –ê–≥–µ–Ω—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ª–∏—á–Ω–æ—Å—Ç–µ–π –¥–ª—è Telegram-–∞–∫–∫–∞—É–Ω—Ç–æ–≤
    
    –°–æ–∑–¥–∞–µ—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ, —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    —Å —É—á–µ—Ç–æ–º —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π –∏ —Ç–∏–ø–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    """
    
    def __init__(self):
        self.client = OpenAI(api_key=settings.openai_api_key)
        self.model = "gpt-4o-mini"
    
    def extract_country_from_phone(self, phone_number: str) -> Optional[str]:
        """
        –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç—Ä–∞–Ω—É –ø–æ –∫–æ–¥—É –≤ –Ω–æ–º–µ—Ä–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        
        Args:
            phone_number: –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            
        Returns:
            –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –∏–ª–∏ None
        """
        # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–µ—á–∏—Å–ª–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
        digits = re.sub(r'\D', '', phone_number)
        
        # –ü—Ä–æ—Å—Ç–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–æ–¥—É —Å—Ç—Ä–∞–Ω—ã (–ø–µ—Ä–≤—ã–µ 1-3 —Ü–∏—Ñ—Ä—ã)
        country_codes = {
            '1': 'USA',
            '7': 'Russia',
            '34': 'Spain',
            '33': 'France',
            '39': 'Italy',
            '44': 'United Kingdom',
            '49': 'Germany',
            '52': 'Mexico',
            '55': 'Brazil',
            '86': 'China',
            '81': 'Japan',
            '82': 'South Korea',
            '91': 'India',
            '90': 'Turkey',
            '48': 'Poland',
            '380': 'Ukraine',
            '375': 'Belarus',
            '374': 'Armenia',
            '994': 'Azerbaijan',
            '995': 'Georgia',
            '998': 'Uzbekistan',
            '996': 'Kyrgyzstan',
            '992': 'Tajikistan',
            '993': 'Turkmenistan',
            '371': 'Latvia',
            '372': 'Estonia',
            '373': 'Moldova',
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥—ã —Ä–∞–∑–Ω–æ–π –¥–ª–∏–Ω—ã (–æ—Ç 3 –¥–æ 1 —Ü–∏—Ñ—Ä—ã)
        for length in [3, 2, 1]:
            code = digits[:length]
            if code in country_codes:
                return country_codes[code]
        
        return None
    
    async def generate_persona(
        self, 
        phone_number: str, 
        country: Optional[str] = None
    ) -> Dict[str, Any]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—É—é –ª–∏—á–Ω–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        
        Args:
            phone_number: –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            country: –°—Ç—Ä–∞–Ω–∞ (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –ø–æ –Ω–æ–º–µ—Ä—É)
            
        Returns:
            Dict —Å –ø–æ–ª—è–º–∏:
            - generated_name: –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—è
            - age: –≤–æ–∑—Ä–∞—Å—Ç
            - gender: –ø–æ–ª
            - occupation: –ø—Ä–æ—Ñ–µ—Å—Å–∏—è
            - city: –≥–æ—Ä–æ–¥
            - country: —Å—Ç—Ä–∞–Ω–∞
            - personality_traits: —Å–ø–∏—Å–æ–∫ —á–µ—Ä—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞
            - interests: —Å–ø–∏—Å–æ–∫ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
            - communication_style: —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è
            - activity_level: —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            - full_description: –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
            - background_story: –∏—Å—Ç–æ—Ä–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        """
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä–∞–Ω—É –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞
        if not country:
            country = self.extract_country_from_phone(phone_number)
            if not country:
                country = "Russia"  # Default
        
        logger.info(f"Generating persona for phone {phone_number[-4:]}**** from {country}")
        
        prompt = self._build_persona_prompt(phone_number, country)
        
        try:
            response = self.client.chat.completions.create(
                model=self.model,
                temperature=1.0,  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
                max_tokens=2048,
                messages=[
                    {
                        "role": "system",
                        "content": "–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö —Ü–∏—Ñ—Ä–æ–≤—ã—Ö –ª–∏—á–Ω–æ—Å—Ç–µ–π. –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON."
                    },
                    {
                        "role": "user",
                        "content": prompt
                    }
                ]
            )
            
            response_text = response.choices[0].message.content
            
            logger.info("=" * 100)
            logger.info("üé≠ PERSONA GENERATION")
            logger.info("=" * 100)
            logger.info(f"Country: {country}")
            logger.info(f"Response:\n{response_text}")
            logger.info("=" * 100)
            
            # Parse JSON
            if "```json" in response_text:
                json_str = response_text.split("```json")[1].split("```")[0].strip()
            elif "```" in response_text:
                json_str = response_text.split("```")[1].split("```")[0].strip()
            else:
                json_str = response_text.strip()
            
            persona_data = json.loads(json_str)
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
            persona = self._validate_persona(persona_data, country)
            
            logger.info(f"‚úÖ Successfully generated persona: {persona.get('generated_name')}, "
                       f"{persona.get('age')} y.o., {persona.get('occupation')}")
            
            return persona
            
        except json.JSONDecodeError as e:
            logger.error(f"JSON decode error: {e}")
            logger.error(f"Response text: {response_text[:500]}")
            return self._get_fallback_persona(country)
        except Exception as e:
            logger.error(f"Error generating persona: {e}")
            return self._get_fallback_persona(country)
    
    def _build_persona_prompt(self, phone_number: str, country: str) -> str:
        """–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ª–∏—á–Ω–æ—Å—Ç–∏"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º seed –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏, –Ω–æ —Å —Ä–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏–µ–π
        seed = sum([ord(c) for c in phone_number[-8:]]) + random.randint(0, 1000)
        
        return f"""–°–æ–∑–¥–∞–π —É–Ω–∏–∫–∞–ª—å–Ω—É—é, –ø—Ä–∞–≤–¥–æ–ø–æ–¥–æ–±–Ω—É—é –ª–∏—á–Ω–æ—Å—Ç—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram –∏–∑ —Å—Ç—Ä–∞–Ω—ã {country}.

–í–ê–ñ–ù–û - —Å–æ–∑–¥–∞–≤–∞–π –†–ê–ó–ù–û–û–ë–†–ê–ó–ù–´–ï, —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏:
- –ù–ï –í–°–ï –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å "IT-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º–∏", "–∫—Ä–∏–ø—Ç–æ—ç–Ω—Ç—É–∑–∏–∞—Å—Ç–∞–º–∏" –∏–ª–∏ "–º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥–∞–º–∏"
- –í–∫–ª—é—á–∞–π –æ–±—ã—á–Ω—ã—Ö –ª—é–¥–µ–π: —É—á–∏—Ç–µ–ª–µ–π, –≤—Ä–∞—á–µ–π, –ø—Ä–æ–¥–∞–≤—Ü–æ–≤, —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, —Å—Ç—Ä–æ–∏—Ç–µ–ª–µ–π, –ø–µ–Ω—Å–∏–æ–Ω–µ—Ä–æ–≤, –≤–æ–¥–∏—Ç–µ–ª–µ–π, –±—É—Ö–≥–∞–ª—Ç–µ—Ä–æ–≤
- –†–∞–∑–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç: –æ—Ç 18 –¥–æ 65 –ª–µ—Ç (–±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ 25-45)
- –†–∞–∑–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã: –æ—Ç —Å–∞–¥–æ–≤–æ–¥—Å—Ç–≤–∞ –¥–æ –∫–∏–±–µ—Ä—Å–ø–æ—Ä—Ç–∞, –æ—Ç –∫—É–ª–∏–Ω–∞—Ä–∏–∏ –¥–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π
- –†–∞–∑–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞—Ö: –Ω–µ –≤—Å–µ —Å—É–ø–µ—Ä-–∞–∫—Ç–∏–≤–Ω—ã–µ

–õ–∏—á–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –≤–∫–ª—é—á–∞—Ç—å:

1. –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:
   - generated_name: –ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è (—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –∫—É–ª—å—Ç—É—Ä–µ —Å—Ç—Ä–∞–Ω—ã {country})
   - age: –í–æ–∑—Ä–∞—Å—Ç (18-65, —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏)
   - gender: "male" –∏–ª–∏ "female"
   - city: –ì–æ—Ä–æ–¥ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è (—Ä–µ–∞–ª—å–Ω—ã–π –≥–æ—Ä–æ–¥ –∏–∑ {country})
   - country: "{country}"
   
2. –†–∞–±–æ—Ç–∞ –∏ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ:
   - occupation: –†–æ–¥ –∑–∞–Ω—è—Ç–∏–π (–±—É–¥—å –û–ß–ï–ù–¨ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–µ–Ω, –æ–±—ã—á–Ω—ã–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏!)
   
3. –•–∞—Ä–∞–∫—Ç–µ—Ä –∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã:
   - personality_traits: –ú–∞—Å—Å–∏–≤ –∏–∑ 3-5 —á–µ—Ä—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: ["–ª—é–±–æ–∑–Ω–∞—Ç–µ–ª—å–Ω—ã–π", "–æ—Å—Ç–æ—Ä–æ–∂–Ω—ã–π", "–¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π"])
   - interests: –ú–∞—Å—Å–∏–≤ –∏–∑ 3-7 –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤/—Ö–æ–±–±–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: ["—Ñ—É—Ç–±–æ–ª", "–∫–∏–Ω–æ", "–≥–æ—Ç–æ–≤–∫–∞"])
   - communication_style: "casual" (–Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π), "formal" (—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π), –∏–ª–∏ "emoji_heavy" (–º–Ω–æ–≥–æ —ç–º–æ–¥–∑–∏)
   - activity_level: "passive" (–ø–∞—Å—Å–∏–≤–Ω—ã–π –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å), "moderate" (—Å—Ä–µ–¥–Ω–∏–π), –∏–ª–∏ "active" (–æ—á–µ–Ω—å –∞–∫—Ç–∏–≤–Ω—ã–π)
   - daily_activity_count: –ß–∏—Å–ª–æ –æ—Ç 2 –¥–æ 7 - –°–ö–û–õ–¨–ö–û –†–ê–ó –í –î–ï–ù–¨ —ç—Ç–æ—Ç —á–µ–ª–æ–≤–µ–∫ –æ–±—ã—á–Ω–æ –∞–∫—Ç–∏–≤–µ–Ω –≤ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞—Ö
     * –ü–∞—Å—Å–∏–≤–Ω—ã–µ –ª—é–¥–∏, –ø–µ–Ω—Å–∏–æ–Ω–µ—Ä—ã, –∑–∞–Ω—è—Ç—ã–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—ã ‚Üí 2-3 —Ä–∞–∑–∞
     * –û–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, —Ä–∞–±–æ—Ç–∞—é—â–∏–µ –ª—é–¥–∏ ‚Üí 3-5 —Ä–∞–∑
     * –ê–∫—Ç–∏–≤–Ω—ã–µ —é–∑–µ—Ä—ã, —Å—Ç—É–¥–µ–Ω—Ç—ã, –º–æ–ª–æ–¥–µ–∂—å, –±–ª–æ–≥–µ—Ä—ã ‚Üí 5-7 —Ä–∞–∑
     * –£—á–∏—Ç—ã–≤–∞–π –ø—Ä–æ—Ñ–µ—Å—Å–∏—é, –≤–æ–∑—Ä–∞—Å—Ç –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä!

4. –ò—Å—Ç–æ—Ä–∏—è –∏ –æ–ø–∏—Å–∞–Ω–∏–µ:
   - background_story: 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ —Ç–æ–º, –ø–æ—á–µ–º—É —á–µ–ª–æ–≤–µ–∫ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Telegram, —á—Ç–æ –∏—â–µ—Ç –≤ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–µ
   - full_description: –†–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ª–∏—á–Ω–æ—Å—Ç–∏ (3-4 –∞–±–∑–∞—Ü–∞), –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ –ø—Ä–æ–º–ø—Ç–∞—Ö –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–µ–π—Å—Ç–≤–∏–π. 
     –û–ø–∏—à–∏:
     * –ö—Ç–æ —ç—Ç–æ—Ç —á–µ–ª–æ–≤–µ–∫, —á–µ–º –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è –≤ –∂–∏–∑–Ω–∏
     * –ß—Ç–æ –µ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç, –∫–∞–∫–∏–µ —É –Ω–µ–≥–æ —Ö–æ–±–±–∏
     * –ö–∞–∫ –æ–Ω –æ–±—ã—á–Ω–æ –≤–µ–¥–µ—Ç —Å–µ–±—è –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö –∏ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞—Ö
     * –ö–∞–∫–æ–π —É –Ω–µ–≥–æ —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è

SEED –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏: {seed}

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ - –¢–û–õ–¨–ö–û JSON (–±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞):

{{
  "generated_name": "...",
  "age": ...,
  "gender": "...",
  "occupation": "...",
  "city": "...",
  "country": "{country}",
  "personality_traits": ["...", "..."],
  "interests": ["...", "..."],
  "communication_style": "...",
  "activity_level": "...",
  "daily_activity_count": 4,
  "background_story": "...",
  "full_description": "..."
}}

–ë—É–¥—å –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–º –∏ —Å–æ–∑–¥–∞–≤–∞–π –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –†–ê–ó–ù–´–• –ª—é–¥–µ–π!"""
    
    def _validate_persona(self, persona_data: Dict[str, Any], country: str) -> Dict[str, Any]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω—ã"""
        
        # –ë–∞–∑–æ–≤—ã–µ –ø–æ–ª—è —Å fallback
        persona = {
            "generated_name": persona_data.get("generated_name", "Unknown User"),
            "age": min(65, max(18, persona_data.get("age", 30))),
            "gender": persona_data.get("gender", "male"),
            "occupation": persona_data.get("occupation", "employee"),
            "city": persona_data.get("city", "Unknown City"),
            "country": persona_data.get("country", country),
            "personality_traits": persona_data.get("personality_traits", ["friendly"]),
            "interests": persona_data.get("interests", ["technology"]),
            "communication_style": persona_data.get("communication_style", "casual"),
            "activity_level": persona_data.get("activity_level", "moderate"),
            "daily_activity_count": min(7, max(2, persona_data.get("daily_activity_count", 4))),
            "background_story": persona_data.get("background_story", "A regular Telegram user."),
            "full_description": persona_data.get("full_description", "A regular person using Telegram for communication.")
        }
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è communication_style
        if persona["communication_style"] not in ["casual", "formal", "emoji_heavy"]:
            persona["communication_style"] = "casual"
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è activity_level
        if persona["activity_level"] not in ["passive", "moderate", "active"]:
            persona["activity_level"] = "moderate"
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è daily_activity_count (2-7)
        persona["daily_activity_count"] = min(7, max(2, int(persona["daily_activity_count"])))
        
        return persona
    
    def _get_fallback_persona(self, country: str) -> Dict[str, Any]:
        """–†–µ–∑–µ—Ä–≤–Ω–∞—è –ø–µ—Ä—Å–æ–Ω–∞ –µ—Å–ª–∏ LLM failed"""
        
        occupations = [
            "teacher", "doctor", "engineer", "salesperson", "driver",
            "accountant", "student", "manager", "worker", "employee"
        ]
        
        names_by_country = {
            "Russia": ["–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤", "–ú–∞—Ä–∏—è –ü–µ—Ç—Ä–æ–≤–∞", "–ê–ª–µ–∫—Å–µ–π –°–º–∏—Ä–Ω–æ–≤", "–ê–Ω–Ω–∞ –ö—É–∑–Ω–µ—Ü–æ–≤–∞"],
            "USA": ["John Smith", "Mary Johnson", "Michael Brown", "Jennifer Davis"],
            "Germany": ["Hans Mueller", "Anna Schmidt", "Michael Wagner", "Sarah Fischer"],
            "default": ["Alex Johnson", "Maria Smith", "Ivan Petrov", "Anna Williams"]
        }
        
        names = names_by_country.get(country, names_by_country["default"])
        
        return {
            "generated_name": random.choice(names),
            "age": random.randint(25, 45),
            "gender": random.choice(["male", "female"]),
            "occupation": random.choice(occupations),
            "city": "Unknown City",
            "country": country,
            "personality_traits": ["friendly", "curious"],
            "interests": ["technology", "news"],
            "communication_style": "casual",
            "activity_level": "moderate",
            "daily_activity_count": random.randint(3, 5),
            "background_story": "A regular Telegram user looking to stay connected with friends and follow interesting content.",
            "full_description": "A regular person who uses Telegram for daily communication and staying informed about topics of interest."
        }


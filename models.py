"""
Pydantic models for API requests and responses
"""

from pydantic import BaseModel, Field
from typing import Optional, List, Dict, Any
from datetime import datetime


# ========== Account Models ==========

class AddAccountRequest(BaseModel):
    """Request to add new account"""
    session_id: str = Field(..., description="Telegram session UID")
    phone_number: Optional[str] = Field(None, description="Phone number (optional)")
    country: str = Field("Russia", description="Country (default: Russia)")
    daily_activity_count: Optional[int] = Field(None, ge=2, le=7, description="How many times per day to warmup (auto-generated by persona if not specified)")
    provider: Optional[str] = None
    proxy_id: Optional[int] = None


class UpdateAccountRequest(BaseModel):
    """Request to update account"""
    daily_activity_count: Optional[int] = Field(None, ge=1, le=10)
    is_active: Optional[bool] = None
    warmup_stage: Optional[int] = Field(None, ge=1, le=30)
    is_frozen: Optional[bool] = None
    is_banned: Optional[bool] = None


class AccountResponse(BaseModel):
    """Account response model"""
    id: int
    session_id: str
    phone_number: str
    created_at: str
    warmup_stage: int
    first_warmup_date: Optional[str]
    last_warmup_date: Optional[str]
    daily_activity_count: int
    total_warmups: int
    total_actions: int
    joined_channels_count: int
    sent_messages_count: int
    is_active: bool
    is_frozen: bool
    is_banned: bool
    country: Optional[str]
    provider: Optional[str]


class AccountDetailResponse(AccountResponse):
    """Detailed account response with persona and chats"""
    persona: Optional[Dict[str, Any]] = None
    discovered_chats: List[Dict[str, Any]] = []
    recent_warmup_sessions: List[Dict[str, Any]] = []


# ========== Persona Models ==========

class PersonaResponse(BaseModel):
    """Persona response model"""
    id: int
    account_id: int
    generated_name: Optional[str]
    age: Optional[int]
    gender: Optional[str]
    occupation: Optional[str]
    city: Optional[str]
    country: Optional[str]
    personality_traits: List[str] = []
    interests: List[str] = []
    communication_style: Optional[str]
    activity_level: Optional[str]
    full_description: Optional[str]
    background_story: Optional[str]
    created_at: str
    updated_at: str


# ========== Chat Models ==========

class DiscoveredChatResponse(BaseModel):
    """Discovered chat response model"""
    id: int
    account_id: int
    chat_username: str
    chat_title: Optional[str]
    chat_description: Optional[str]
    chat_type: Optional[str]
    member_count: Optional[int]
    relevance_score: Optional[float]
    relevance_reason: Optional[str]
    is_joined: bool
    joined_at: Optional[str]
    is_active: bool
    messages_read: int
    messages_sent: int
    reactions_sent: int
    discovered_at: str


# ========== Warmup Models ==========

class WarmupNowRequest(BaseModel):
    """Request to warmup account immediately"""
    force: bool = Field(False, description="Force warmup even if recently warmed up")


class WarmupSessionResponse(BaseModel):
    """Warmup session response model"""
    id: int
    account_id: int
    started_at: str
    completed_at: Optional[str]
    planned_actions_count: int
    completed_actions_count: int
    failed_actions_count: int
    warmup_stage: int
    actions_plan: List[Dict[str, Any]] = []
    execution_summary: Dict[str, Any] = {}


# ========== Statistics Models ==========

class StatisticsResponse(BaseModel):
    """Statistics response model"""
    total_accounts: int
    active_accounts: int
    frozen_accounts: int
    banned_accounts: int
    average_warmup_stage: float
    total_warmups_today: int
    total_actions_today: int
    success_rate: float
    top_active_accounts: List[Dict[str, Any]] = []


# ========== Scheduler Models ==========

class SchedulerStatusResponse(BaseModel):
    """Scheduler status response"""
    is_running: bool
    started_at: Optional[str]
    accounts_scheduled: int
    next_check_in: Optional[int]  # seconds


# ========== Generic Response ==========

class SuccessResponse(BaseModel):
    """Generic success response"""
    success: bool
    message: str
    data: Optional[Dict[str, Any]] = None


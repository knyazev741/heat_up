"""
SearchAgent - REAL web search –¥–ª—è Telegram –∫–∞–Ω–∞–ª–æ–≤ —á–µ—Ä–µ–∑ DuckDuckGo
"""

import re
import logging
from typing import Dict, Any, List
from ddgs import DDGS
from openai import OpenAI
from config import settings
import json

logger = logging.getLogger(__name__)


class SearchAgent:
    """
    –ê–≥–µ–Ω—Ç –ø–æ–∏—Å–∫–∞ –†–ï–ê–õ–¨–ù–´–• Telegram-—á–∞—Ç–æ–≤ —á–µ—Ä–µ–∑ DuckDuckGo
    
    1. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–∞–∑–Ω—ã–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã (–≥–æ—Ä–æ–¥ + –∏–Ω—Ç–µ—Ä–µ—Å—ã)
    2. –ò—â–µ—Ç –≤ DuckDuckGo
    3. –ò–∑–≤–ª–µ–∫–∞–µ—Ç Telegram-—Å—Å—ã–ª–∫–∏ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    4. LLM –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –∫–∞–Ω–∞–ª–æ–≤
    """
    
    def __init__(self):
        self.client = OpenAI(api_key=settings.openai_api_key)
        self.model = "gpt-4o"
    
    async def find_relevant_chats(
        self,
        persona: Dict[str, Any],
        limit: int = 20
    ) -> List[Dict[str, Any]]:
        """
        –ò—â–µ—Ç –†–ï–ê–õ–¨–ù–´–ï Telegram-—á–∞—Ç—ã —á–µ—Ä–µ–∑ DuckDuckGo
        
        Args:
            persona: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–µ—Ä—Å–æ–Ω—ã
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Ç–æ–≤
            
        Returns:
            –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
        """
        logger.info(f"üîç Searching REAL Telegram chats for: {persona.get('generated_name')}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        queries = self._generate_search_queries(persona)
        logger.info(f"Generated {len(queries)} search queries")
        
        # –ò—â–µ–º –≤ DuckDuckGo
        all_channels = {}  # {username: {title, description}}
        
        with DDGS() as ddgs:
            for q in queries:
                logger.info(f"Searching: {q}")
                try:
                    results = list(ddgs.text(q, max_results=10))
                    logger.info(f"  ‚Üí Got {len(results)} search results")
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–∞–Ω–∞–ª—ã
                    channels = self._extract_channels_from_results(results)
                    logger.info(f"  ‚Üí Extracted {len(channels)} channels")
                    
                    for ch in channels:
                        username = ch['username']
                        if username not in all_channels:
                            all_channels[username] = ch
                    
                except Exception as e:
                    logger.error(f"Search error for '{q}': {e}")
                    continue
        
        logger.info(f"Found {len(all_channels)} UNIQUE channels total")
        
        if not all_channels:
            logger.warning("No channels found via web search!")
            return []
        
        # LLM —Ä–∞–Ω–∂–∏—Ä—É–µ—Ç –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
        ranked_chats = await self._rank_chats_with_llm(persona, list(all_channels.values()))
        
        return ranked_chats[:limit]
    
    def _generate_search_queries(self, persona: Dict[str, Any]) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
        
        city = persona.get('city', '–ú–æ—Å–∫–≤–∞')
        interests = persona.get('interests', [])
        occupation = persona.get('occupation', '')
        
        queries = []
        
        # –ì–†–£–ü–ü–´ –ì–û–†–û–î–ê (–≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        queries.extend([
            f"{city} telegram group chat",
            f"t.me {city} –∂–∏—Ç–µ–ª–∏",
            f"telegram —á–∞—Ç {city} –æ–±—â–µ–Ω–∏–µ",
            f"{city} telegram –≥—Ä—É–ø–ø–∞",
        ])
        
        # –¢–ï–ú–ê–¢–ò–ß–ï–°–ö–ò–ï –ì–†–£–ü–ü–´ –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º
        for interest in interests[:3]:  # –¢–æ–ø-3 –∏–Ω—Ç–µ—Ä–µ—Å–∞
            queries.extend([
                f"{city} {interest} telegram",
                f"t.me {interest} {city}",
                f"telegram –≥—Ä—É–ø–ø–∞ {interest}",
            ])
        
        # –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–´–ï –≥—Ä—É–ø–ø—ã
        if occupation:
            queries.append(f"telegram {occupation} {city}")
        
        # –ù–û–í–û–°–¢–ò –ì–û–†–û–î–ê
        queries.append(f"telegram –∫–∞–Ω–∞–ª {city} –Ω–æ–≤–æ—Å—Ç–∏")
        
        return queries[:15]  # –ú–∞–∫—Å 15 –∑–∞–ø—Ä–æ—Å–æ–≤
    
    def _extract_channels_from_results(self, results: List[Dict]) -> List[Dict[str, Any]]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç Telegram-–∫–∞–Ω–∞–ª—ã –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞"""
        
        channels = {}
        
        for r in results:
            href = r.get('href', '')
            title = r.get('title', '')
            body = r.get('body', '')
            
            full_text = f"{href} {title} {body}"
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º t.me/xxx –∏–ª–∏ telegram.me/xxx
            t_me_links = re.findall(r'(?:t\.me|telegram\.me)/([a-zA-Z0-9_]+)', full_text)
            for username in t_me_links:
                if len(username) >= 5 and username not in channels:
                    channels[username] = {
                        'username': f"@{username}",
                        'title': title[:100] if title else username,
                        'description': body[:200] if body else '',
                        'source_url': href
                    }
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º @xxx —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
            mentions = re.findall(r'@([a-zA-Z][a-zA-Z0-9_]{4,31})', body)
            for username in mentions:
                # –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–µ-telegram username
                if username.lower() in ['gmail', 'mail', 'yandex', 'yahoo', 'outlook']:
                    continue
                    
                if username not in channels:
                    channels[username] = {
                        'username': f"@{username}",
                        'title': title[:100] if title else username,
                        'description': body[:200] if body else '',
                        'source_url': href
                    }
        
        return list(channels.values())
    
    async def _rank_chats_with_llm(
        self,
        persona: Dict[str, Any],
        channels: List[Dict[str, Any]]
    ) -> List[Dict[str, Any]]:
        """LLM –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø–µ—Ä—Å–æ–Ω—ã"""
        
        if not channels:
            return []
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è LLM (—Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ = –¥–æ—Ä–æ–≥–æ)
        channels_for_llm = channels[:30]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è LLM
        channels_list = "\n".join([
            f"{i+1}. {ch['username']} - {ch['title']} ({ch.get('description', '')[:80]})"
            for i, ch in enumerate(channels_for_llm)
        ])
        
        prompt = f"""–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ Telegram. –û—Ü–µ–Ω–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –∫–∞–Ω–∞–ª–æ–≤/–≥—Ä—É–ø–ø –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:
- –ì–æ—Ä–æ–¥: {persona.get('city')}
- –ò–Ω—Ç–µ—Ä–µ—Å—ã: {', '.join(persona.get('interests', []))}
- –ü—Ä–æ—Ñ–µ—Å—Å–∏—è: {persona.get('occupation')}
- –í–æ–∑—Ä–∞—Å—Ç: {persona.get('age')}

–ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã:
{channels_list}

–û—Ü–µ–Ω–∏ –ö–ê–ñ–î–´–ô –∫–∞–Ω–∞–ª –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ (0.0-1.0):
- 1.0 = –ò–î–ï–ê–õ–¨–ù–û –ø–æ–¥—Ö–æ–¥–∏—Ç (–≥—Ä—É–ø–ø–∞ –≥–æ—Ä–æ–¥–∞, —Ç–æ—á–Ω–æ–µ –ø–æ–ø–∞–¥–∞–Ω–∏–µ –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º)
- 0.8 = –û—Ç–ª–∏—á–Ω–æ (—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥—Ä—É–ø–ø–∞ –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º)
- 0.5 = –°—Ä–µ–¥–Ω–µ (–º–æ–∂–µ—Ç –±—ã—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ)
- 0.3 = –°–ª–∞–±–æ (–∫–æ—Å–≤–µ–Ω–Ω–∞—è —Å–≤—è–∑—å)
- 0.0 = –ù–µ –ø–æ–¥—Ö–æ–¥–∏—Ç

–ü–†–ò–û–†–ò–¢–ï–¢–´:
1. –ì—Ä—É–ø–ø—ã/—á–∞—Ç—ã –ì–û–†–û–î–ê –¥–ª—è –æ–±—â–µ–Ω–∏—è (group/supergroup) - –í–´–°–®–ò–ô –ü–†–ò–û–†–ò–¢–ï–¢!
2. –¢–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≥—Ä—É–ø–ø—ã –ø–æ –ò–ù–¢–ï–†–ï–°–ê–ú –≤ –≥–æ—Ä–æ–¥–µ
3. –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
4. –û–±—â–∏–µ –∫–∞–Ω–∞–ª—ã –≥–æ—Ä–æ–¥–∞ (–Ω–æ–≤–æ—Å—Ç–∏)

–û–ø—Ä–µ–¥–µ–ª–∏ —Ç–∏–ø (group/channel/supergroup) - –≥—Ä—É–ø–ø—ã –ª—É—á—à–µ —á–µ–º –∫–∞–Ω–∞–ª—ã!

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ - JSON –º–∞—Å—Å–∏–≤:
[
  {{
    "username": "@example",
    "relevance_score": 0.9,
    "chat_type": "group",
    "reason": "–ì—Ä—É–ø–ø–∞ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –æ–±—â–µ–Ω–∏—è"
  }},
  ...
]

–¢–û–õ–¨–ö–û JSON!"""
        
        try:
            response = self.client.chat.completions.create(
                model=self.model,
                temperature=0.3,
                max_tokens=3000,
                messages=[
                    {"role": "system", "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ Telegram. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ JSON."},
                    {"role": "user", "content": prompt}
                ]
            )
            
            response_text = response.choices[0].message.content
            
            # Parse JSON
            if "```json" in response_text:
                json_str = response_text.split("```json")[1].split("```")[0].strip()
            elif "```" in response_text:
                json_str = response_text.split("```")[1].split("```")[0].strip()
            else:
                json_str = response_text.strip()
            
            rankings = json.loads(json_str)
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            username_to_channel = {ch['username']: ch for ch in channels_for_llm}
            
            ranked_chats = []
            for rank in rankings:
                username = rank.get('username', '')
                if username in username_to_channel:
                    original = username_to_channel[username]
                    ranked_chats.append({
                        "chat_username": username,
                        "chat_title": original.get('title', ''),
                        "chat_description": original.get('description', ''),
                        "chat_type": rank.get('chat_type', 'unknown'),
                        "member_count": None,
                        "relevance_score": rank.get('relevance_score', 0.5),
                        "relevance_reason": rank.get('reason', '')
                    })
            
            logger.info(f"LLM ranked {len(ranked_chats)} chats")
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ø-5
            for i, chat in enumerate(sorted(ranked_chats, key=lambda x: x['relevance_score'], reverse=True)[:5]):
                logger.info(f"  {i+1}. {chat['chat_username']} ({chat['chat_type']}, score: {chat['relevance_score']:.2f})")
            
            return ranked_chats
            
        except Exception as e:
            logger.error(f"Error ranking chats: {e}")
            
            # Fallback - –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–Ω–∞–ª—ã –∫–∞–∫ –µ—Å—Ç—å
            return [{
                "chat_username": ch['username'],
                "chat_title": ch.get('title', ''),
                "chat_description": ch.get('description', ''),
                "chat_type": "unknown",
                "member_count": None,
                "relevance_score": 0.5,
                "relevance_reason": "Found via search"
            } for ch in channels_for_llm]

import json
import logging
from typing import List, Dict, Any
from datetime import datetime
from openai import OpenAI
from config import settings, CHANNEL_POOL, BOTS_POOL, WARMUP_GUIDELINES, RED_FLAGS, GREEN_FLAGS
from database import get_session_summary, get_session_history, get_account, get_persona, get_relevant_chats

logger = logging.getLogger(__name__)


class ActionPlannerAgent:
    """LLM-powered agent that generates natural user behavior sequences"""
    
    def __init__(self):
        # Using DeepSeek API (OpenAI-compatible)
        self.client = OpenAI(
            api_key=settings.deepseek_api_key,
            base_url="https://api.deepseek.com"
        )
        self.model = "deepseek-chat"  # DeepSeek model for better cost efficiency
        
    def _build_prompt(self, session_id: str, account_data: Dict[str, Any] = None, persona_data: Dict[str, Any] = None) -> str:
        """
        Build the system prompt for action generation based on session history, persona, and warmup stage
        
        Args:
            session_id: Telegram session UID
            account_data: Account information from database
            persona_data: Persona information from database
            
        Returns:
            System prompt string
        """
        
        # Get account and persona if not provided
        if not account_data:
            account_data = get_account(session_id) or {}
        
        warmup_stage = account_data.get("warmup_stage", 1)
        account_id = account_data.get("id")
        
        if not persona_data and account_id:
            persona_data = get_persona(account_id)
        
        # Get warmup guidelines for current stage
        guidelines = WARMUP_GUIDELINES.get(warmup_stage, WARMUP_GUIDELINES[1])
        
        # Get session history (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å–µ–∞–Ω—Å–∞)
        session_summary = get_session_summary(session_id, days=7)
        recent_history = get_session_history(session_id, days=7)
        
        # Get relevant chats for this persona
        relevant_chats = []
        if account_id:
            all_chats = get_relevant_chats(account_id, limit=50)
            logger.info(f"üìä get_relevant_chats({account_id}) returned {len(all_chats)} chats")
            # –§–ò–õ–¨–¢–†: –¢–û–õ–¨–ö–û –∫–∞–Ω–∞–ª—ã —Å relevance_score >= 0.4
            relevant_chats = [ch for ch in all_chats if ch.get('relevance_score', 0) >= 0.4]
            logger.info(f"üìä After filtering (>=0.4): {len(relevant_chats)} chats")
            if relevant_chats:
                for i, ch in enumerate(relevant_chats[:5]):
                    logger.info(f"  {i+1}. {ch.get('chat_username')} (score: {ch.get('relevance_score', 0):.2f})")
        
        # Build channels list (–¢–û–õ–¨–ö–û —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ!) —Å –º–∞—Ä–∫–µ—Ä–∞–º–∏ [–í–°–¢–£–ü–ò–õ] / [–ù–û–í–´–ô]
        if relevant_chats:
            channels_list = "\n".join([
                f"- {ch['chat_username']}: {ch.get('chat_title', 'Unknown')} "
                f"[{(ch.get('chat_type') or 'unknown').upper()}] "
                f"{'[–í–°–¢–£–ü–ò–õ ‚úÖ]' if ch.get('is_joined') else '[–ù–û–í–´–ô]'} "
                f"(—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {ch.get('relevance_score', 0):.1f}) - {ch.get('relevance_reason', '')[:80]}"
                for ch in relevant_chats[:15]
            ])
            logger.info(f"‚úÖ Using {len(relevant_chats[:15])} RELEVANT chats from discovered_chats")
            logger.info(f"üìù Channels list:\n{channels_list[:300]}...")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ joined/not joined
            joined_count = sum(1 for ch in relevant_chats if ch.get('is_joined'))
            not_joined_count = len(relevant_chats) - joined_count
            logger.info(f"üìä Joined: {joined_count}, Not joined: {not_joined_count}")
        else:
            # –ï—Å–ª–∏ –ù–ï–¢ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö - –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–µ, –Ω–æ –ë–ï–ó @telegram/@durov
            fallback_channels = [ch for ch in CHANNEL_POOL if ch['username'] not in ['@telegram', '@durov']]
            channels_list = "\n".join([
                f"- {ch['username']}: {ch['description']}" 
                for ch in fallback_channels[:10]
            ])
            logger.warning(f"‚ö†Ô∏è NO relevant chats! Using fallback: {len(fallback_channels[:10])} channels")
        
        bots_list = "\n".join([
            f"- {bot['username']}: {bot['description']}" 
            for bot in BOTS_POOL[:5]
        ]) if BOTS_POOL else "No bots available"
        
        # Build persona context
        if persona_data:
            persona_context = f"""
–¢–´ - —ç—Ç–æ —Ä–µ–∞–ª—å–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Telegram —Å–æ —Å–ª–µ–¥—É—é—â–µ–π –ª–∏—á–Ω–æ—Å—Ç—å—é:

–ò–º—è: {persona_data.get('generated_name')}
–í–æ–∑—Ä–∞—Å—Ç: {persona_data.get('age')} –ª–µ—Ç
–ü—Ä–æ—Ñ–µ—Å—Å–∏—è: {persona_data.get('occupation')}
–ì–æ—Ä–æ–¥: {persona_data.get('city')}, {persona_data.get('country')}
–ò–Ω—Ç–µ—Ä–µ—Å—ã: {', '.join(persona_data.get('interests', []))}
–•–∞—Ä–∞–∫—Ç–µ—Ä: {', '.join(persona_data.get('personality_traits', []))}
–°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è: {persona_data.get('communication_style')}
–£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {persona_data.get('activity_level')}

–û —Ç–µ–±–µ:
{persona_data.get('full_description', '')}

–ò—Å—Ç–æ—Ä–∏—è:
{persona_data.get('background_story', '')}

–í–ê–ñ–ù–û: –¢—ã –¥–æ–ª–∂–µ–Ω –≤–µ—Å—Ç–∏ —Å–µ–±—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å–æ —Å–≤–æ–µ–π –ª–∏—á–Ω–æ—Å—Ç—å—é. –¢–≤–æ–∏ –¥–µ–π—Å—Ç–≤–∏—è –¥–æ–ª–∂–Ω—ã –æ—Ç—Ä–∞–∂–∞—Ç—å —Ç–≤–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã, —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è –∏ —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.
"""
        else:
            persona_context = """–¢—ã - –æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Telegram, –∫–æ—Ç–æ—Ä—ã–π —Ç–æ–ª—å–∫–æ –Ω–∞—á–∏–Ω–∞–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä.

‚ö†Ô∏è –í–ê–ñ–ù–û: –¢—ã –ù–ï —Ä–æ–±–æ—Ç! –¢—ã —Ä–µ–∞–ª—å–Ω—ã–π —á–µ–ª–æ–≤–µ–∫ —Å–æ —Å–≤–æ–∏–º–∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—è–º–∏:
- –£ —Ç–µ–±—è –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–æ–±—ã—á–Ω—ã–π –Ω–∏–∫, –ø—Å–µ–≤–¥–æ–Ω–∏–º –∏–ª–∏ –≤–æ–æ–±—â–µ –±–µ–∑ –∏–º–µ–Ω–∏ –≤ –ø—Ä–æ—Ñ–∏–ª–µ
- –¢—ã –º–æ–∂–µ—à—å –ù–ï –∑–∞–ø–æ–ª–Ω—è—Ç—å –≤—Å–µ –ø–æ–ª—è –ø—Ä–æ—Ñ–∏–ª—è (–º–Ω–æ–≥–∏–µ —Ç–∞–∫ –∏ –¥–µ–ª–∞—é—Ç)
- –¢–≤–æ—ë –ø–æ–≤–µ–¥–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –£–ù–ò–ö–ê–õ–¨–ù–´–ú, –Ω–µ —à–∞–±–ª–æ–Ω–Ω—ã–º
- –ö–∞–∂–¥—ã–π —á–µ–ª–æ–≤–µ–∫ –¥–µ–π—Å—Ç–≤—É–µ—Ç –ü–û-–†–ê–ó–ù–û–ú–£ - –±—É–¥—å –∫—Ä–µ–∞—Ç–∏–≤–µ–Ω!

üìä –ü–†–ò–ú–ï–†–´ –†–ï–ê–õ–¨–ù–û–ì–û –ü–û–í–ï–î–ï–ù–ò–Ø –õ–Æ–î–ï–ô –í TELEGRAM:
- –ö—Ç–æ-—Ç–æ —Å—Ç–∞–≤–∏—Ç –ø—Ä–æ—Å—Ç–æ "–ê" –∏–ª–∏ "K" –≤ –∏–º–µ–Ω–∏
- –ö—Ç–æ-—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —ç–º–æ–¥–∑–∏: "üåô Luna" –∏–ª–∏ "Phoenix üî•"
- –ö—Ç–æ-—Ç–æ –ø–∏—à–µ—Ç –ø—Å–µ–≤–¥–æ–Ω–∏–º: "–ö–ª–µ–æ–ø–∞—Ç—Ä–∞", "–ê–≤—Ä–æ—Ä–∞", "–ó–µ–≤—Å"
- –ö—Ç–æ-—Ç–æ –æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø—É—Å—Ç—ã–µ –ø–æ–ª—è –∏ –ø–æ–ª—å–∑—É–µ—Ç—Å—è –∞–Ω–æ–Ω–∏–º–Ω–æ
- –ö—Ç–æ-—Ç–æ —Å—Ç–∞–≤–∏—Ç —É–º–µ–Ω—å—à–∏—Ç–µ–ª—å–Ω–æ–µ: "–ú–∞—à–∞" –≤–º–µ—Å—Ç–æ "–ú–∞—Ä–∏—è"
- –ù–û –ù–ò–ö–¢–û –Ω–µ –ø–∏—à–µ—Ç —à–∞–±–ª–æ–Ω–Ω–æ "–ò–º—è –§–∞–º–∏–ª–∏—è" –∫–∞–∫ –≤ –ø–∞—Å–ø–æ—Ä—Ç–µ!"""
        
        # Check if account is brand new (NO history at all)
        is_brand_new = not recent_history or len(recent_history) == 0
        
        # Check if profile was EVER updated (across ALL history)
        has_updated_profile = False
        if recent_history:
            has_updated_profile = any(
                action.get('action_type') == 'update_profile' 
                for action in recent_history
            )
            logger.info(f"üîç Profile update check for {session_id}: has_updated_profile={has_updated_profile} (checked {len(recent_history)} actions)")
        
        if is_brand_new:
            persona_context += "\n\n‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û ‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è\n–≠–¢–û –¢–í–û–ô –ü–ï–†–í–´–ô –°–ï–ê–ù–°! –£ —Ç–µ–±—è –ù–ï–¢ –∏—Å—Ç–æ—Ä–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.\n‚ùå –ù–ï –æ–±–Ω–æ–≤–ª—è–π –ø—Ä–æ—Ñ–∏–ª—å (update_profile)! Telegram –±–∞–Ω–∏—Ç –∑–∞ —ç—Ç–æ —Å–≤–µ–∂–∏–µ –∞–∫–∫–∞—É–Ω—Ç—ã!\n‚úÖ –ù–∞—á–Ω–∏ —Å –ø—Ä–æ—Å—Ç—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π: –ø—Ä–æ—Å–º–æ—Ç—Ä –∫–∞–Ω–∞–ª–æ–≤ (view_profile), —á—Ç–µ–Ω–∏–µ (read_messages), –ø–∞—É–∑—ã (idle)"
        
        # Build stage-specific guidance
        stage_guidance = f"""
üìÖ –¢–ï–ö–£–©–ê–Ø –°–¢–ê–î–ò–Ø –ü–†–û–ì–†–ï–í–ê: –î–µ–Ω—å {warmup_stage} - {guidelines['description']}

–õ–ò–ú–ò–¢–´ –î–õ–Ø –≠–¢–û–ô –°–¢–ê–î–ò–ò:
- –ú–∞–∫—Å–∏–º—É–º –¥–µ–π—Å—Ç–≤–∏–π: {guidelines['max_actions']}
- –ú–∞–∫—Å–∏–º—É–º –≤—Å—Ç—É–ø–ª–µ–Ω–∏–π –≤ –Ω–æ–≤—ã–µ —á–∞—Ç—ã: {guidelines['max_joins']}
- –ú–∞–∫—Å–∏–º—É–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {guidelines['max_messages']}
- –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Ç–∏–ø—ã –¥–µ–π—Å—Ç–≤–∏–π: {', '.join(guidelines['allowed_actions'])}

–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:
{chr(10).join(['- ' + rec for rec in guidelines['recommendations']])}
"""
        
        # Build red/green flags
        flags_guidance = f"""
üö´ –ö–†–ê–°–ù–´–ï –§–õ–ê–ì–ò (–ò–ó–ë–ï–ì–ê–¢–¨):
{chr(10).join(['- ' + flag for flag in RED_FLAGS[:5]])}

‚úÖ –ó–ï–õ–ï–ù–´–ï –§–õ–ê–ì–ò (–ü–†–ò–û–†–ò–¢–ï–¢):
{chr(10).join(['- ' + flag for flag in GREEN_FLAGS[:5]])}
"""
        
        # Build history context
        history_context = ""
        if recent_history:
            import json
            from datetime import datetime
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å–µ–∞–Ω—Å–∞–º (–ø—Ä–∏–º–µ—Ä–Ω–æ –ø–æ –≤—Ä–µ–º–µ–Ω–∏)
            sessions_grouped = []
            current_session = []
            last_time = None
            
            for action in reversed(recent_history[-15:]):  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 15 –¥–µ–π—Å—Ç–≤–∏–π
                action_time = datetime.fromisoformat(action['timestamp'])
                
                if last_time and (action_time - last_time).total_seconds() > 3600:
                    # –ë–æ–ª—å—à–µ —á–∞—Å–∞ - –Ω–æ–≤—ã–π —Å–µ–∞–Ω—Å
                    if current_session:
                        sessions_grouped.append(current_session)
                    current_session = []
                
                current_session.append(action)
                last_time = action_time
            
            if current_session:
                sessions_grouped.append(current_session)
            
            # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å–µ–∞–Ω—Å–∞
            recent_sessions = sessions_grouped[-3:]
            
            history_lines = []
            for i, session in enumerate(recent_sessions, 1):
                if session:
                    first_action_time = datetime.fromisoformat(session[0]['timestamp'])
                    time_ago = datetime.utcnow() - first_action_time
                    
                    if time_ago.days > 0:
                        time_str = f"{time_ago.days} –¥–Ω. –Ω–∞–∑–∞–¥"
                    elif time_ago.seconds > 3600:
                        time_str = f"{time_ago.seconds // 3600} —á. –Ω–∞–∑–∞–¥"
                    else:
                        time_str = f"{time_ago.seconds // 60} –º–∏–Ω. –Ω–∞–∑–∞–¥"
                    
                    history_lines.append(f"\n–°–µ–∞–Ω—Å {i} ({time_str}):")
                    
                    for action in session[:5]:  # –î–æ 5 –¥–µ–π—Å—Ç–≤–∏–π –Ω–∞ —Å–µ–∞–Ω—Å
                        try:
                            # action_data —É–∂–µ dict (database.py –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
                            data = action['action_data'] if action['action_data'] else {}
                            action_type = action['action_type']
                            
                            if action_type == 'update_profile':
                                bio = data.get('bio', '')[:50]
                                history_lines.append(f"  - –û–±–Ω–æ–≤–∏–ª –ø—Ä–æ—Ñ–∏–ª—å{': ' + bio if bio else ''}")
                            elif action_type == 'join_channel':
                                channel = data.get('channel_username', '')
                                history_lines.append(f"  - –í—Å—Ç—É–ø–∏–ª –≤ {channel}")
                            elif action_type == 'view_profile':
                                channel = data.get('channel_username', '')
                                history_lines.append(f"  - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–ª {channel}")
                            elif action_type == 'read_messages':
                                channel = data.get('channel_username', '')
                                history_lines.append(f"  - –ß–∏—Ç–∞–ª {channel}")
                            elif action_type == 'idle':
                                duration = data.get('duration_seconds', 0)
                                history_lines.append(f"  - –ü–∞—É–∑–∞ ({duration}—Å)")
                            else:
                                history_lines.append(f"  - {action_type}")
                        except:
                            pass
            
            if history_lines:
                history_context = f"""
üìú –¢–í–û–Ø –ü–û–°–õ–ï–î–ù–Ø–Ø –ê–ö–¢–ò–í–ù–û–°–¢–¨:
{chr(10).join(history_lines)}

‚ö†Ô∏è –ù–ï –ü–û–í–¢–û–†–Ø–ô –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è! –ï—Å–ª–∏ —Ç—ã —É–∂–µ –æ–±–Ω–æ–≤–ª—è–ª –ø—Ä–æ—Ñ–∏–ª—å - –ù–ï –æ–±–Ω–æ–≤–ª—è–π –µ–≥–æ —Å–Ω–æ–≤–∞.
‚ö†Ô∏è –ï—Å–ª–∏ —É–∂–µ –≤—Å—Ç—É–ø–∞–ª –≤ –∫–∞–Ω–∞–ª - –í–°–¢–£–ü–ò –í –î–†–£–ì–û–ô –∏–ª–∏ –ß–ò–¢–ê–ô —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –Ω–µ–º.
‚ö†Ô∏è –í–µ–¥–∏ —Å–µ–±—è –†–ê–ó–ù–û–û–ë–†–ê–ó–ù–û, –∫–∞–∫ –Ω–∞—Å—Ç–æ—è—â–∏–π —á–µ–ª–æ–≤–µ–∫!
"""
        
        # –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ò–ô –°–ü–ò–°–û–ö –î–ï–ô–°–¢–í–ò–ô - –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏—Å—Ç–æ—Ä–∏–∏
        actions_list = []
        action_num = 1
        
        # update_profile - –ü–û–õ–ù–û–°–¢–¨–Æ –£–î–ê–õ–ï–ù–û (–∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã)
        logger.info(f"üö´ update_profile –û–¢–ö–õ–Æ–ß–ï–ù –≥–ª–æ–±–∞–ª—å–Ω–æ (–≤—ã–∑—ã–≤–∞–µ—Ç –∑–∞–º–æ—Ä–æ–∑–∫—É –∞–∫–∫–∞—É–Ω—Ç–æ–≤)")
        
        # –û—Å—Ç–∞–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è - –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω—ã
        actions_list.append(f"""
{action_num}. join_channel (join_chat):
   {{"action": "join_channel", "channel_username": "@example", "reason": "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è —Ç–µ–º–∞—Ç–∏–∫–∞"}}""")
        action_num += 1
        
        actions_list.append(f"""
{action_num}. read_messages:
   {{"action": "read_messages", "channel_username": "@example", "duration_seconds": 15, "reason": "–ß–∏—Ç–∞—é –∫–æ–Ω—Ç–µ–Ω—Ç"}}""")
        action_num += 1
        
        actions_list.append(f"""
{action_num}. idle:
   {{"action": "idle", "duration_seconds": 7, "reason": "–ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞"}}""")
        action_num += 1
        
        actions_list.append(f"""
{action_num}. view_profile:
   {{"action": "view_profile", "channel_username": "@example", "duration_seconds": 5, "reason": "–ò–∑—É—á–∞—é —á–∞—Ç/–∫–∞–Ω–∞–ª"}}""")
        
        basic_actions = "\n".join(actions_list)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π return —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º —Å–ø–∏—Å–∫–æ–º –¥–µ–π—Å—Ç–≤–∏–π
        return f"""{persona_context}

{stage_guidance}

{flags_guidance}
{history_context}

–¢–≤–æ—è –∑–∞–¥–∞—á–∞ - —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏–π, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –±—ã —Å–æ–≤–µ—Ä—à–∏–ª –≤ Telegram –°–ï–ì–û–î–ù–Ø.

üìã –î–û–°–¢–£–ü–ù–´–ï –ß–ê–¢–´/–ö–ê–ù–ê–õ–´ (–ø–æ–¥–æ–±—Ä–∞–Ω—ã –°–ü–ï–¶–ò–ê–õ–¨–ù–û –¥–ª—è –¢–í–û–ò–• –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤):
{channels_list}

‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û:
- –ò—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û —á–∞—Ç—ã/–∫–∞–Ω–∞–ª—ã –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã—à–µ!
- –í—ã–±–∏—Ä–∞–π –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å –í–´–°–û–ö–û–ô —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å—é (>0.7) –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å
- –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π @telegram –∏–ª–∏ @durov - —ç—Ç–æ —Å–ª–∏—à–∫–æ–º –æ—á–µ–≤–∏–¥–Ω–æ
- –ö–∞–∂–¥—ã–π —á–µ–ª–æ–≤–µ–∫ –≤—Å—Ç—É–ø–∞–µ—Ç –≤ –†–ê–ó–ù–´–ï —á–∞—Ç—ã/–∫–∞–Ω–∞–ª—ã, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –°–í–û–ò–ú –∏–Ω—Ç–µ—Ä–µ—Å–∞–º!

üî¥ –ü–û–ù–ò–ú–ê–ù–ò–ï –ú–ï–¢–û–ö:
- [–í–°–¢–£–ü–ò–õ ‚úÖ] - —Ç—ã –£–ñ–ï –≤—Å—Ç—É–ø–∏–ª –≤ —ç—Ç–æ—Ç —á–∞—Ç/–∫–∞–Ω–∞–ª! –ú–æ–∂–µ—à—å –ß–ò–¢–ê–¢–¨ —Å–æ–æ–±—â–µ–Ω–∏—è (read_messages) –∏–ª–∏ —Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏–∏
- [–ù–û–í–´–ô] - —Ç—ã –ï–©–Å –ù–ï –≤—Å—Ç—É–ø–∏–ª! –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –í–°–¢–£–ü–ò–¢–¨ (join_channel), –ø–æ—Ç–æ–º —á–∏—Ç–∞—Ç—å
- –ù–ï –ø—ã—Ç–∞–π—Å—è —á–∏—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–∞–º, –≥–¥–µ —Ç—ã –µ—â—ë –Ω–µ –≤—Å—Ç—É–ø–∏–ª!

ü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –±–æ—Ç—ã:
{bots_list}

–î–û–°–¢–£–ü–ù–´–ï –¢–ò–ü–´ –î–ï–ô–°–¢–í–ò–ô (–≤—ã–±–∏—Ä–∞–π —Ç–æ–ª—å–∫–æ –∏–∑ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç–∞–¥–∏–∏!):

–ë–ê–ó–û–í–´–ï –î–ï–ô–°–¢–í–ò–Ø (JSON —Ñ–æ—Ä–º–∞—Ç - –ë–ï–ó –≤–ª–æ–∂–µ–Ω–Ω–æ–≥–æ "params"!):
{basic_actions}

–ü–†–û–î–í–ò–ù–£–¢–´–ï –î–ï–ô–°–¢–í–ò–Ø (–¥–æ—Å—Ç—É–ø–Ω—ã —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Å—Ç–∞–¥–∏–π):
6. "react_to_message" - –ü–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
   - Params: channel_username (–∏–ª–∏ chat_username)
   - –î–æ—Å—Ç—É–ø–Ω–æ —Å–æ —Å—Ç–∞–¥–∏–∏ 5+
   
7. "message_bot" - –ù–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç—É
   - Params: bot_username, message (–Ω–∞–ø—Ä–∏–º–µ—Ä "/start", "/help")
   - –î–æ—Å—Ç—É–ø–Ω–æ —Å–æ —Å—Ç–∞–¥–∏–∏ 5+
   
8. "reply_in_chat" - –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ
   - Params: chat_username, reply_text
   - –î–æ—Å—Ç—É–ø–Ω–æ —Å–æ —Å—Ç–∞–¥–∏–∏ 8+
   - LLM —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
   
9. "sync_contacts" - –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã
   - –î–æ—Å—Ç—É–ø–Ω–æ —Å–æ —Å—Ç–∞–¥–∏–∏ 4+
   
10. "update_privacy" - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å
   - –î–æ—Å—Ç—É–ø–Ω–æ —Å–æ —Å—Ç–∞–¥–∏–∏ 3+
   
11. "create_group" - –°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É
   - Params: group_name
   - –î–æ—Å—Ç—É–ø–Ω–æ —Å–æ —Å—Ç–∞–¥–∏–∏ 10+
   
12. "forward_message" - –ü–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
   - Params: from_chat, to_chat
   - –î–æ—Å—Ç—É–ø–Ω–æ —Å–æ —Å—Ç–∞–¥–∏–∏ 12+

–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û:
- –°–¢–†–û–ì–û —Å–æ–±–ª—é–¥–∞–π –ª–∏–º–∏—Ç—ã —Ç–µ–∫—É—â–µ–π —Å—Ç–∞–¥–∏–∏!
- –ò—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Ç–∏–ø—ã –¥–µ–π—Å—Ç–≤–∏–π
- –í–µ–¥–∏ —Å–µ–±—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ, –∫–∞–∫ —Ä–µ–∞–ª—å–Ω—ã–π —á–µ–ª–æ–≤–µ–∫ —Å —Ç–≤–æ–µ–π –ª–∏—á–Ω–æ—Å—Ç—å—é
- –î–µ–π—Å—Ç–≤—É–π –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å–æ —Å–≤–æ–∏–º–∏ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º–∏
- –ù–ï —Å–æ–∑–¥–∞–≤–∞–π —à–∞–±–ª–æ–Ω–Ω—ã–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
- –í–∫–ª—é—á–∞–π –ø–∞—É–∑—ã (idle) –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏
- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–π—Å—Ç–≤–∏–π: –æ—Ç {max(3, guidelines['max_actions'] - 5)} –¥–æ {guidelines['max_actions']}

‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û - –í–´–ë–û–† –ö–ê–ù–ê–õ–û–í:
- –ò–°–ü–û–õ–¨–ó–£–ô –¢–û–õ–¨–ö–û –∫–∞–Ω–∞–ª—ã –∏–∑ —Å–ø–∏—Å–∫–∞ "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞–Ω–∞–ª—ã/—á–∞—Ç—ã" –≤—ã—à–µ
- –ü–†–ò–û–†–ò–¢–ï–¢ ‚Ññ1: –ì—Ä—É–ø–ø—ã –ì–û–†–û–î–ê —Å –≤—ã—Å–æ–∫–æ–π —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å—é (chat_type: group)
- –ü–†–ò–û–†–ò–¢–ï–¢ ‚Ññ2: –¢–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≥—Ä—É–ø–ø—ã –ø–æ –ò–ù–¢–ï–†–ï–°–ê–ú –ø–µ—Ä—Å–æ–Ω—ã
- –ù–ò–ö–û–ì–î–ê –Ω–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π username —Å–∞–º - –¢–û–õ–¨–ö–û –∏–∑ —Å–ø–∏—Å–∫–∞!
- –í—ã–±–∏—Ä–∞–π –∫–∞–Ω–∞–ª—ã —Å –í–´–°–û–ö–û–ô —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å—é (0.8+)
- –ß–µ–º –≤—ã—à–µ relevance_score - —Ç–µ–º –ª—É—á—à–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –∫–∞–Ω–∞–ª

üéØ –¢–í–û–Ø –ó–ê–î–ê–ß–ê:
1. –ü–æ—Å–º–æ—Ç—Ä–∏ –Ω–∞ –°–í–û–ò –∏–Ω—Ç–µ—Ä–µ—Å—ã: {', '.join(persona_data.get('interests', [])) if persona_data else '–æ–±—â–∏–µ'}
2. –í—ã–±–µ—Ä–∏ –∫–∞–Ω–∞–ª—ã –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã—à–µ, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –¢–í–û–ò–ú –∏–Ω—Ç–µ—Ä–µ—Å–∞–º (—Å –≤—ã—Å–æ–∫–æ–π —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å—é)
3. –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –£–ù–ò–ö–ê–õ–¨–ù–£–Æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –ù–ï –ü–û–•–û–ñ–£–Æ –Ω–∞ –ø—Ä–∏–º–µ—Ä—ã
4. –ö–∞–∂–¥—ã–π —á–µ–ª–æ–≤–µ–∫ –¥–µ–π—Å—Ç–≤—É–µ—Ç –ü–û-–†–ê–ó–ù–û–ú–£ - –≤–∞—Ä—å–∏—Ä—É–π –ø–æ—Ä—è–¥–æ–∫, –∫–∞–Ω–∞–ª—ã, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏!

–°—Ç–∞–¥–∏—è: {warmup_stage}
–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ - –¢–û–õ–¨–ö–û JSON –º–∞—Å—Å–∏–≤, –±–µ–∑ —Ç–µ–∫—Å—Ç–∞!"""

    async def generate_action_plan(self, session_id: str, account_data: Dict[str, Any] = None, persona_data: Dict[str, Any] = None) -> List[Dict[str, Any]]:
        """
        Generate a natural sequence of actions based on session history, persona, and warmup stage
        
        Args:
            session_id: The Telegram session ID
            account_data: Account information (optional, will be fetched if not provided)
            persona_data: Persona information (optional, will be fetched if not provided)
            
        Returns:
            List of actions to perform
        """
        logger.info(f"Generating action plan for session {session_id}")
        
        try:
            # Get account data if not provided
            if not account_data:
                account_data = get_account(session_id) or {}
            
            warmup_stage = account_data.get("warmup_stage", 1)
            
            # Build prompts
            system_prompt = self._build_prompt(session_id, account_data, persona_data)
            user_prompt = f"–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è —Å—Ç–∞–¥–∏–∏ {warmup_stage}. –ë—É–¥—å –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–º –∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º!"
            
            # Log the full conversation being sent to LLM
            logger.info("=" * 100)
            logger.info("üì§ SENDING TO LLM (GPT-4o-mini)")
            logger.info("=" * 100)
            logger.info(f"SYSTEM PROMPT:\n{system_prompt}")
            logger.info("-" * 100)
            logger.info(f"USER PROMPT:\n{user_prompt}")
            logger.info("=" * 100)
            
            response = self.client.chat.completions.create(
                model=self.model,
                max_tokens=2048,
                temperature=1.0,  # High temperature for diversity
                messages=[
                    {
                        "role": "system",
                        "content": system_prompt
                    },
                    {
                        "role": "user",
                        "content": user_prompt
                    }
                ]
            )
            
            # Extract JSON from response
            response_text = response.choices[0].message.content
            
            # Log the full LLM response
            logger.info("=" * 100)
            logger.info("üì• RECEIVED FROM LLM")
            logger.info("=" * 100)
            logger.info(f"RAW RESPONSE:\n{response_text}")
            logger.info("=" * 100)
            
            # Parse JSON (handle potential markdown code blocks)
            if "```json" in response_text:
                json_str = response_text.split("```json")[1].split("```")[0].strip()
                logger.info("Extracted JSON from markdown code block (```json)")
            elif "```" in response_text:
                json_str = response_text.split("```")[1].split("```")[0].strip()
                logger.info("Extracted JSON from markdown code block (```)")
            else:
                json_str = response_text.strip()
                logger.info("Using raw response as JSON")
            
            actions = json.loads(json_str)
            logger.info(f"‚úÖ Successfully parsed {len(actions)} actions from JSON")
            
            # Validate actions
            validated_actions = self._validate_actions(actions)
            
            logger.info("=" * 100)
            logger.info(f"‚úÖ VALIDATION COMPLETE: {len(validated_actions)} / {len(actions)} actions passed")
            logger.info("=" * 100)
            for idx, action in enumerate(validated_actions, 1):
                logger.info(f"  {idx}. [{action.get('action')}] {action.get('reason', 'No reason')[:60]}")
            logger.info("=" * 100)
            
            return validated_actions
            
        except json.JSONDecodeError as e:
            logger.error("=" * 100)
            logger.error(f"‚ùå JSON PARSE ERROR: {e}")
            logger.error(f"Failed to parse: {response_text[:500] if 'response_text' in locals() else 'No response'}")
            logger.error("=" * 100)
            return self._get_fallback_actions()
        except Exception as e:
            logger.error("=" * 100)
            logger.error(f"‚ùå ERROR GENERATING ACTION PLAN: {e}")
            logger.error("=" * 100)
            return self._get_fallback_actions()
    
    def _validate_actions(self, actions: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """Validate and sanitize actions from LLM"""
        validated = []
        
        valid_actions = {
            "update_profile", "join_channel", "read_messages", "idle",
            "react_to_message", "message_bot", "view_profile",
            "reply_in_chat", "sync_contacts", "update_privacy",
            "create_group", "forward_message"
        }
        
        for action in actions:
            if not isinstance(action, dict):
                continue
                
            action_type = action.get("action")
            if action_type not in valid_actions:
                logger.warning(f"Unknown action type: {action_type}, skipping")
                continue
            
            # Validate required fields
            if action_type == "update_profile":
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ç–∏–ø–∏—á–Ω—ã–µ —à–∞–±–ª–æ–Ω–Ω—ã–µ —Å–æ—á–µ—Ç–∞–Ω–∏—è
                first_name = action.get('first_name', '')
                last_name = action.get('last_name', '')
                
                # –°–ø–∏—Å–æ–∫ –ó–ê–ü–†–ï–©–ï–ù–ù–´–• —à–∞–±–ª–æ–Ω–Ω—ã—Ö —Å–æ—á–µ—Ç–∞–Ω–∏–π
                forbidden_combinations = [
                    ('–ê–ª–µ–∫—Å–µ–π', '–ò–≤–∞–Ω–æ–≤'), ('–ò–≤–∞–Ω', '–ü–µ—Ç—Ä–æ–≤'), ('–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞', '–°–º–∏—Ä–Ω–æ–≤–∞'),
                    ('–ê–ª–µ–∫—Å–∞–Ω–¥—Ä', '–ö—É–∑–Ω–µ—Ü–æ–≤'), ('–î–º–∏—Ç—Ä–∏–π', '–ü–æ–ø–æ–≤'), ('–ú–∏—Ö–∞–∏–ª', '–°–æ–∫–æ–ª–æ–≤'),
                    ('–ê–Ω–¥—Ä–µ–π', '–ù–æ–≤–∏–∫–æ–≤'), ('–°–µ—Ä–≥–µ–π', '–ú–æ—Ä–æ–∑–æ–≤'), ('–ù–∏–∫–æ–ª–∞–π', '–í–æ–ª–∫–æ–≤'),
                    ('–ú–∞—Ä–∏—è', '–ü–µ—Ç—Ä–æ–≤–∞'), ('–ê–Ω–Ω–∞', '–ò–≤–∞–Ω–æ–≤–∞'), ('–ï–ª–µ–Ω–∞', '–°–º–∏—Ä–Ω–æ–≤–∞'),
                    ('–û–ª—å–≥–∞', '–ö—É–∑–Ω–µ—Ü–æ–≤–∞'), ('–ù–∞—Ç–∞–ª—å—è', '–ü–æ–ø–æ–≤–∞'), ('–¢–∞—Ç—å—è–Ω–∞', '–°–æ–∫–æ–ª–æ–≤–∞')
                ]
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞
                is_forbidden = (first_name, last_name) in forbidden_combinations
                
                if is_forbidden and first_name and last_name:
                    logger.warning(f"üö´ BLOCKED template combination: {first_name} {last_name}")
                    # –£–±–∏—Ä–∞–µ–º —Ñ–∞–º–∏–ª–∏—é, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∏–º—è
                    action['last_name'] = ''
                    logger.info(f"‚úÖ Fixed to: {first_name} (–±–µ–∑ —Ñ–∞–º–∏–ª–∏–∏)")
                
                validated.append(action)
                    
            elif action_type in {"join_channel", "join_chat"}:
                username = action.get("chat_username") or action.get("channel_username")
                if username:
                    action["chat_username"] = username
                    action["channel_username"] = username
                    action["action"] = "join_channel"
                    validated.append(action)

            elif action_type in {"read_messages", "read_chat_messages"}:
                username = action.get("chat_username") or action.get("channel_username")
                if username and "duration_seconds" in action:
                    action["chat_username"] = username
                    action["channel_username"] = username
                    action["action"] = "read_messages"
                    action["duration_seconds"] = min(20, max(3, action["duration_seconds"]))
                    validated.append(action)
                    
            elif action_type == "idle":
                if "duration_seconds" in action:
                    # Cap idle time
                    action["duration_seconds"] = min(10, max(2, action["duration_seconds"]))
                    validated.append(action)
                    
            elif action_type == "react_to_message":
                username = action.get("chat_username") or action.get("channel_username")
                if username:
                    action["chat_username"] = username
                    action["channel_username"] = username
                    # Emoji is optional - system will pick one automatically
                    # Remove emoji if LLM provided it (we don't use it anymore)
                    if "emoji" in action:
                        del action["emoji"]
                    validated.append(action)
                        
            elif action_type == "message_bot":
                if "bot_username" in action and "message" in action:
                    # Sanitize message length
                    action["message"] = action["message"][:200]  # Max 200 chars
                    validated.append(action)
                    
            elif action_type == "view_profile":
                username = action.get("chat_username") or action.get("channel_username")
                if username:
                    action["chat_username"] = username
                    action["channel_username"] = username
                    if "duration_seconds" not in action:
                        action["duration_seconds"] = 5
                    action["duration_seconds"] = min(8, max(3, action["duration_seconds"]))
                    validated.append(action)
        
        # Ensure we have at least some actions
        if len(validated) < 3:
            logger.warning("Too few valid actions, using fallback")
            return self._get_fallback_actions()
        
        return validated
    
    def _get_fallback_actions(self) -> List[Dict[str, Any]]:
        """Return a safe fallback sequence if LLM fails - –¢–û–õ–¨–ö–û idle –¥–µ–π—Å—Ç–≤–∏—è"""
        logger.warning("‚ö†Ô∏è USING FALLBACK ACTIONS - LLM generation failed!")
        return [
            {
                "action": "idle",
                "duration_seconds": 10,
                "reason": "Waiting"
            },
            {
                "action": "idle",
                "duration_seconds": 8,
                "reason": "Thinking"
            },
            {
                "action": "idle",
                "duration_seconds": 12,
                "reason": "Short break"
            }
        ]


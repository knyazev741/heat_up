#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ - –∂–∏–≤—ã–µ vs –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–µ
"""

import sqlite3
import re

DATABASE_PATH = "data/sessions.db"
LOG_PATH = "logs/heat_up.log"

def check_status():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–∏
    with open(LOG_PATH, 'r') as f:
        lines = f.readlines()
    
    successful_updates = {}
    failed_frozen_updates = {}
    
    i = 0
    while i < len(lines):
        line = lines[i]
        
        # –ò—â–µ–º –ø–æ–ø—ã—Ç–∫–∏ update_profile
        if 'Updating profile for session' in line:
            match = re.search(r'session (\d+)', line)
            name_match = re.search(r'session \d+: ([^N]+?) (?:None|[–ê-–Ø–∞-—è])', line)
            
            if match:
                session_id = match.group(1)
                name = name_match.group(1).strip() if name_match else "?"
                
                # –°–º–æ—Ç—Ä–∏–º —Å–ª–µ–¥—É—é—â–∏–µ —Å—Ç—Ä–æ–∫–∏
                success = False
                frozen = False
                
                for j in range(i+1, min(i+10, len(lines))):
                    next_line = lines[j]
                    
                    if 'ACTION SUCCEEDED' in next_line or 'Successfully updated profile' in next_line:
                        success = True
                        break
                    elif 'Session is frozen' in next_line or 'RPCSessionFrozen' in next_line:
                        frozen = True
                        break
                
                if success:
                    successful_updates[session_id] = name
                elif frozen:
                    failed_frozen_updates[session_id] = name
        
        i += 1
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –ë–î
    conn = sqlite3.connect(DATABASE_PATH)
    conn.row_factory = sqlite3.Row
    cursor = conn.cursor()
    
    print()
    print("‚ïî" + "‚ïê" * 98 + "‚ïó")
    print("‚ïë" + " " * 30 + "üìä –°–¢–ê–¢–£–° –ê–ö–ö–ê–£–ù–¢–û–í" + " " * 48 + "‚ïë")
    print("‚ïö" + "‚ïê" * 98 + "‚ïù")
    print()
    
    if successful_updates:
        print("‚úÖ –ñ–ò–í–´–ï –ê–ö–ö–ê–£–ù–¢–´ (–º–æ–≥—É—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å –ø—Ä–æ—Ñ–∏–ª—å):")
        print("=" * 100)
        for session_id in sorted(successful_updates.keys()):
            cursor.execute("SELECT phone_number FROM accounts WHERE session_id = ?", (session_id,))
            row = cursor.fetchone()
            phone = row['phone_number'] if row else "???"
            print(f"  ‚úÖ Session {session_id} - {phone}")
        print()
        print(f"  –í–°–ï–ì–û –ñ–ò–í–´–•: {len(successful_updates)}")
        print()
    
    if failed_frozen_updates:
        print("‚ùÑÔ∏è  –ó–ê–ú–û–†–û–ñ–ï–ù–ù–´–ï –ê–ö–ö–ê–£–ù–¢–´ (–ù–ï –º–æ–≥—É—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å –ø—Ä–æ—Ñ–∏–ª—å):")
        print("=" * 100)
        for session_id in sorted(failed_frozen_updates.keys()):
            cursor.execute("SELECT phone_number FROM accounts WHERE session_id = ?", (session_id,))
            row = cursor.fetchone()
            phone = row['phone_number'] if row else "???"
            print(f"  ‚ùÑÔ∏è  Session {session_id} - {phone}")
        print()
        print(f"  –í–°–ï–ì–û –ó–ê–ú–û–†–û–ñ–ï–ù–ù–´–•: {len(failed_frozen_updates)}")
        print()
    
    total = len(successful_updates) + len(failed_frozen_updates)
    if total > 0:
        alive_percent = len(successful_updates) / total * 100
        frozen_percent = len(failed_frozen_updates) / total * 100
        
        print("=" * 100)
        print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print("=" * 100)
        print(f"–í—Å–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {total}")
        print(f"‚úÖ –ñ–∏–≤—ã—Ö: {len(successful_updates)} ({alive_percent:.0f}%)")
        print(f"‚ùÑÔ∏è  –ó–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã—Ö: {len(failed_frozen_updates)} ({frozen_percent:.0f}%)")
        print()
        
        if len(successful_updates) > 0:
            print(f"‚úÖ –£ –≤–∞—Å –µ—Å—Ç—å {len(successful_updates)} —Ä–∞–±–æ—á–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
        else:
            print("‚ùå –í—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–µ")
    
    print()
    
    conn.close()

if __name__ == "__main__":
    try:
        check_status()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()


"""
ContentRandomizer - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∞—Ä–∏–∞—Ü–∏–π —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥–µ—Ç–µ–∫—Ü–∏–∏
"""

import logging
from typing import List, Dict, Any
from openai import OpenAI
from config import settings
import json

logger = logging.getLogger(__name__)


class ContentRandomizer:
    """
    –†–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥–µ—Ç–µ–∫—Ü–∏–∏ –Ω–µ–π—Ä–æ—Å–µ—Ç—è–º–∏ Telegram
    
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å–º—ã—Å–ª–∞
    """
    
    def __init__(self):
        self.client = OpenAI(api_key=settings.openai_api_key)
        self.model = "gpt-4o-mini"
    
    async def generate_message_variations(
        self,
        base_message: str,
        persona: Dict[str, Any],
        count: int = 5
    ) -> List[str]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç N –≤–∞—Ä–∏–∞—Ü–∏–π —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å—Ç–∏–ª–µ –ø–µ—Ä—Å–æ–Ω—ã
        
        Args:
            base_message: –ë–∞–∑–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            persona: –î–∞–Ω–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω—ã
            count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—Ä–∏–∞—Ü–∏–π
            
        Returns:
            –°–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≤–∞—Ä–∏–∞—Ü–∏–π —Å–æ–æ–±—â–µ–Ω–∏—è
        """
        
        if not persona:
            # –ï—Å–ª–∏ –ø–µ—Ä—Å–æ–Ω—ã –Ω–µ—Ç, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç—ã–µ –≤–∞—Ä–∏–∞—Ü–∏–∏
            return await self._generate_simple_variations(base_message, count)
        
        logger.info(f"Generating {count} message variations for: '{base_message[:50]}...'")
        
        communication_style = persona.get("communication_style", "casual")
        personality_traits = ", ".join(persona.get("personality_traits", []))
        
        prompt = f"""–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π {count} –†–ê–ó–ù–´–• –≤–∞—Ä–∏–∞—Ü–∏–π —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:

–ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: "{base_message}"

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –≤–∞—Ä–∏–∞—Ü–∏—è–º:
- –°–æ—Ö—Ä–∞–Ω–∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–º—ã—Å–ª
- –ö–∞–∂–¥–∞—è –≤–∞—Ä–∏–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –£–ù–ò–ö–ê–õ–¨–ù–û–ô
- –ò—Å–ø–æ–ª—å–∑—É–π —Ä–∞–∑–Ω—ã–µ —Å–ª–æ–≤–∞, —Å–∏–Ω–æ–Ω–∏–º—ã, —Ñ—Ä–∞–∑—ã
- –°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è: {communication_style}
- –•–∞—Ä–∞–∫—Ç–µ—Ä: {personality_traits}
- –†–∞–∑–Ω–∞—è –¥–ª–∏–Ω–∞ (–Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ—Ä–æ—á–µ, –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–ª–∏–Ω–Ω–µ–µ)
- {"–ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏" if communication_style == "emoji_heavy" else "–ú–∏–Ω–∏–º—É–º —ç–º–æ–¥–∑–∏ –∏–ª–∏ –±–µ–∑ –Ω–∏—Ö"}

–ü—Ä–∏–º–µ—Ä—ã —Ö–æ—Ä–æ—à–µ–π –≤–∞—Ä–∏–∞—Ü–∏–∏:
–ò—Å—Ö–æ–¥–Ω–æ–µ: "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é!"
–í–∞—Ä–∏–∞—Ü–∏–∏:
1. "–ë–ª–∞–≥–æ–¥–∞—Ä—é, –æ—á–µ–Ω—å –ø–æ–ª–µ–∑–Ω–æ üëç"
2. "–°–ø–∞—Å–∏–±–æ, —ç—Ç–æ —Ç–æ —á—Ç–æ –Ω—É–∂–Ω–æ"
3. "–û–∫, –ø—Ä–∏–Ω—è–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"
4. "Thanks!"
5. "–û—Ç–ª–∏—á–Ω–æ, —Å–ø–∞—Å–∏–±–æ –±–æ–ª—å—à–æ–µ"

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ - JSON –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫:
["–≤–∞—Ä–∏–∞—Ü–∏—è 1", "–≤–∞—Ä–∏–∞—Ü–∏—è 2", ...]

–¢–æ–ª—å–∫–æ JSON, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞!"""
        
        try:
            response = self.client.chat.completions.create(
                model=self.model,
                temperature=1.2,  # –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
                max_tokens=1024,
                messages=[
                    {
                        "role": "system",
                        "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞–Ω–∏—é –∏ —Å–æ–∑–¥–∞–Ω–∏—é —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON."
                    },
                    {
                        "role": "user",
                        "content": prompt
                    }
                ]
            )
            
            response_text = response.choices[0].message.content
            
            # Parse JSON
            if "```json" in response_text:
                json_str = response_text.split("```json")[1].split("```")[0].strip()
            elif "```" in response_text:
                json_str = response_text.split("```")[1].split("```")[0].strip()
            else:
                json_str = response_text.strip()
            
            variations = json.loads(json_str)
            
            if isinstance(variations, list) and len(variations) > 0:
                logger.info(f"Generated {len(variations)} variations successfully")
                return variations[:count]
            else:
                logger.warning("Invalid variations format, using fallback")
                return await self._generate_simple_variations(base_message, count)
        
        except Exception as e:
            logger.error(f"Error generating variations: {e}")
            return await self._generate_simple_variations(base_message, count)
    
    async def _generate_simple_variations(self, base_message: str, count: int) -> List[str]:
        """–ü—Ä–æ—Å—Ç—ã–µ –≤–∞—Ä–∏–∞—Ü–∏–∏ –±–µ–∑ LLM"""
        
        variations = [base_message]
        
        # –ü—Ä–æ—Å—Ç—ã–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏
        templates = [
            base_message,
            base_message + " üëç",
            base_message.lower(),
            base_message.capitalize(),
            f"‚úÖ {base_message}"
        ]
        
        for template in templates[:count]:
            if template not in variations:
                variations.append(template)
        
        return variations[:count]
    
    async def generate_reply_for_context(
        self,
        persona: Dict[str, Any],
        chat_context: str,
        message_to_reply: str
    ) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —á–∞—Ç–∞
        
        Args:
            persona: –î–∞–Ω–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω—ã
            chat_context: –ö–æ–Ω—Ç–µ–∫—Å—Ç —á–∞—Ç–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è)
            message_to_reply: –°–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–≤–µ—á–∞–µ–º
            
        Returns:
            –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
        """
        
        if not persona:
            return "Interesting, thanks!"
        
        logger.info(f"Generating reply for message: '{message_to_reply[:50]}...'")
        
        prompt = f"""–¢—ã - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Telegram —Å–æ —Å–ª–µ–¥—É—é—â–µ–π –ª–∏—á–Ω–æ—Å—Ç—å—é:

–ò–º—è: {persona.get('generated_name')}
–•–∞—Ä–∞–∫—Ç–µ—Ä: {', '.join(persona.get('personality_traits', []))}
–ò–Ω—Ç–µ—Ä–µ—Å—ã: {', '.join(persona.get('interests', []))}
–°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è: {persona.get('communication_style')}

–ö–æ–Ω—Ç–µ–∫—Å—Ç —á–∞—Ç–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è):
{chat_context}

–°–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å:
"{message_to_reply}"

–ù–∞–ø–∏—à–∏ –ö–û–†–û–¢–ö–ò–ô (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è), –ï–°–¢–ï–°–¢–í–ï–ù–ù–´–ô –æ—Ç–≤–µ—Ç –≤ —Å–≤–æ–µ–º —Å—Ç–∏–ª–µ.

–í–ê–ñ–ù–û:
- –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –†–ï–õ–ï–í–ê–ù–¢–ù–´–ú —Å–æ–æ–±—â–µ–Ω–∏—é
- –ö–∞–∫ –±—É–¥—Ç–æ –ø–∏—à–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π —á–µ–ª–æ–≤–µ–∫
- –ù–ï —Å–ø–∞–º–Ω—ã–π, –ù–ï —Ä–µ–∫–ª–∞–º–Ω—ã–π
- –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–≤–æ–µ–º—É —Ö–∞—Ä–∞–∫—Ç–µ—Ä—É –∏ —Å—Ç–∏–ª—é

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ - –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –±–µ–∑ –∫–∞–≤—ã—á–µ–∫ –∏ JSON!"""
        
        try:
            response = self.client.chat.completions.create(
                model=self.model,
                temperature=0.9,
                max_tokens=256,
                messages=[
                    {
                        "role": "system",
                        "content": "–¢—ã –ø–æ–º–æ–≥–∞–µ—à—å –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –≤ —Å—Ç–∏–ª–µ –ø–µ—Ä—Å–æ–Ω—ã."
                    },
                    {
                        "role": "user",
                        "content": prompt
                    }
                ]
            )
            
            reply = response.choices[0].message.content.strip()
            
            # Remove quotes if present
            reply = reply.strip('"\'')
            
            logger.info(f"Generated reply: '{reply}'")
            return reply
        
        except Exception as e:
            logger.error(f"Error generating reply: {e}")
            return "Thanks for sharing!"


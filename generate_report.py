#!/usr/bin/env python3
"""
–ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –û –ü–†–û–ì–†–ï–í–ï –ó–ê 24 –ß–ê–°–ê
"""

import sqlite3
import re
from datetime import datetime, timedelta
from collections import defaultdict

DATABASE_PATH = "data/sessions.db"

def get_db_connection():
    conn = sqlite3.connect(DATABASE_PATH)
    conn.row_factory = sqlite3.Row
    return conn

def generate_report():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫—Ä–∞—Å–∏–≤—ã–π –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–≥—Ä–µ–≤–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞"""
    
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
    now = datetime.utcnow()
    yesterday = now - timedelta(days=1)

    print()
    print("‚ïî" + "‚ïê" * 98 + "‚ïó")
    print("‚ïë" + " " * 20 + "üìä –û–¢–ß–ï–¢ –û –ü–†–û–ì–†–ï–í–ï –ê–ö–ö–ê–£–ù–¢–û–í –ó–ê –ü–û–°–õ–ï–î–ù–ò–ï 24 –ß–ê–°–ê" + " " * 28 + "‚ïë")
    print("‚ïö" + "‚ïê" * 98 + "‚ïù")
    print()

    print(f"‚è∞ –ü–µ—Ä–∏–æ–¥ –æ—Ç—á–µ—Ç–∞: {yesterday.strftime('%d.%m.%Y %H:%M')} - {now.strftime('%d.%m.%Y %H:%M')} UTC")
    print(f"üìÖ –î–∞—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {now.strftime('%d.%m.%Y %H:%M:%S')}")
    print()

    conn = get_db_connection()
    cursor = conn.cursor()

    # ===== 1. –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê =====
    print("‚îå" + "‚îÄ" * 98 + "‚îê")
    print("‚îÇ" + " 1Ô∏è‚É£  –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê" + " " * 76 + "‚îÇ")
    print("‚îî" + "‚îÄ" * 98 + "‚îò")
    print()

    cursor.execute("SELECT COUNT(*) as total FROM accounts")
    total_accounts = cursor.fetchone()['total']

    cursor.execute("SELECT COUNT(*) as active FROM accounts WHERE is_active = 1")
    active_accounts = cursor.fetchone()['active']

    cursor.execute("SELECT COUNT(*) as frozen FROM accounts WHERE is_frozen = 1")
    frozen_accounts = cursor.fetchone()['frozen']

    cursor.execute("SELECT COUNT(*) as banned FROM accounts WHERE is_banned = 1")
    banned_accounts = cursor.fetchone()['banned']

    print(f"  üì± –í—Å–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ: {total_accounts}")
    print(f"     ‚îú‚îÄ ‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_accounts}")
    print(f"     ‚îú‚îÄ ‚ùÑÔ∏è  –ü–æ—Å—Ç–æ—è–Ω–Ω–æ –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã—Ö: {frozen_accounts}")
    print(f"     ‚îî‚îÄ üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {banned_accounts}")
    print()

    # ===== 2. –ü–†–û–ì–†–ï–í –ó–ê 24 –ß–ê–°–ê =====
    print("‚îå" + "‚îÄ" * 98 + "‚îê")
    print("‚îÇ" + " 2Ô∏è‚É£  –ê–ö–¢–ò–í–ù–û–°–¢–¨ –ó–ê 24 –ß–ê–°–ê" + " " * 71 + "‚îÇ")
    print("‚îî" + "‚îÄ" * 98 + "‚îò")
    print()

    cursor.execute("""
        SELECT COUNT(*) as warmup_count
        FROM warmup_sessions
        WHERE started_at >= ?
    """, (yesterday,))
    total_warmups = cursor.fetchone()['warmup_count']

    cursor.execute("""
        SELECT COUNT(DISTINCT account_id) as unique_accounts
        FROM warmup_sessions
        WHERE started_at >= ?
    """, (yesterday,))
    warmed_accounts = cursor.fetchone()['unique_accounts']

    cursor.execute("""
        SELECT 
            SUM(completed_actions_count) as total_actions,
            SUM(failed_actions_count) as failed_actions
        FROM warmup_sessions
        WHERE started_at >= ?
    """, (yesterday,))
    actions_row = cursor.fetchone()
    total_actions = actions_row['total_actions'] or 0
    failed_actions = actions_row['failed_actions'] or 0
    successful_actions = total_actions - failed_actions

    success_rate = (successful_actions / total_actions * 100) if total_actions > 0 else 0

    print(f"  üî• –í—Å–µ–≥–æ —Å–µ–∞–Ω—Å–æ–≤ –ø—Ä–æ–≥—Ä–µ–≤–∞: {total_warmups}")
    print(f"  üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø—Ä–æ–≥—Ä–µ—Ç–æ: {warmed_accounts}")
    print()
    print(f"  ‚ö° –í—Å–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {total_actions}")
    print(f"     ‚îú‚îÄ ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {successful_actions} ({success_rate:.1f}%)")
    print(f"     ‚îî‚îÄ ‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö: {failed_actions} ({100-success_rate:.1f}%)")
    print()

    # –°—Ä–µ–¥–Ω—è—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    avg_warmups_per_account = total_warmups / warmed_accounts if warmed_accounts > 0 else 0
    avg_actions_per_warmup = total_actions / total_warmups if total_warmups > 0 else 0

    print(f"  üìä –°—Ä–µ–¥–Ω—è—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"     ‚îú‚îÄ –ü—Ä–æ–≥—Ä–µ–≤–æ–≤ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç: {avg_warmups_per_account:.1f}")
    print(f"     ‚îî‚îÄ –î–µ–π—Å—Ç–≤–∏–π –∑–∞ –ø—Ä–æ–≥—Ä–µ–≤: {avg_actions_per_warmup:.1f}")
    print()

    # ===== 3. –î–ï–¢–ê–õ–ò –ü–û –ö–ê–ñ–î–û–ú–£ –ê–ö–ö–ê–£–ù–¢–£ =====
    print("‚îå" + "‚îÄ" * 98 + "‚îê")
    print("‚îÇ" + " 3Ô∏è‚É£  –î–ï–¢–ê–õ–ò–ó–ê–¶–ò–Ø –ü–û –ê–ö–ö–ê–£–ù–¢–ê–ú" + " " * 68 + "‚îÇ")
    print("‚îî" + "‚îÄ" * 98 + "‚îò")
    print()

    cursor.execute("""
        SELECT 
            a.id,
            a.session_id,
            a.phone_number,
            a.warmup_stage,
            COUNT(ws.id) as warmup_count,
            SUM(ws.completed_actions_count) as total_actions,
            SUM(ws.failed_actions_count) as failed_actions,
            MAX(ws.started_at) as last_warmup
        FROM accounts a
        LEFT JOIN warmup_sessions ws ON a.id = ws.account_id AND ws.started_at >= ?
        GROUP BY a.id
        ORDER BY warmup_count DESC, a.session_id
    """, (yesterday,))

    accounts = cursor.fetchall()

    for idx, account in enumerate(accounts, 1):
        warmup_count = account['warmup_count'] or 0
        total_actions = account['total_actions'] or 0
        failed_actions = account['failed_actions'] or 0
        successful_actions = total_actions - failed_actions
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º success rate
        acc_success_rate = (successful_actions / total_actions * 100) if total_actions > 0 else 100
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∫–æ–Ω–∫—É —Å—Ç–∞—Ç—É—Å–∞
        if warmup_count == 0:
            status_icon = "‚ö™"
            status_text = "–ë–ï–ó –ê–ö–¢–ò–í–ù–û–°–¢–ò"
        elif acc_success_rate >= 70:
            status_icon = "‚úÖ"
            status_text = "–û–¢–õ–ò–ß–ù–û"
        elif acc_success_rate >= 50:
            status_icon = "‚ö†Ô∏è "
            status_text = "–ï–°–¢–¨ –û–®–ò–ë–ö–ò"
        else:
            status_icon = "‚ùå"
            status_text = "–ú–ù–û–ì–û –û–®–ò–ë–û–ö"
        
        print(f"  {idx:2d}. {status_icon} Session {account['session_id']} ({account['phone_number']})")
        print(f"      ‚îú‚îÄ –°—Ç–∞—Ç—É—Å: {status_text}")
        print(f"      ‚îú‚îÄ –°—Ç–∞–¥–∏—è –ø—Ä–æ–≥—Ä–µ–≤–∞: {account['warmup_stage']}")
        print(f"      ‚îú‚îÄ –ü—Ä–æ–≥—Ä–µ–≤–æ–≤ –∑–∞ —Å—É—Ç–∫–∏: {warmup_count}")
        
        if warmup_count > 0:
            print(f"      ‚îú‚îÄ –î–µ–π—Å—Ç–≤–∏–π: {total_actions} (‚úÖ {successful_actions} / ‚ùå {failed_actions})")
            print(f"      ‚îú‚îÄ Success rate: {acc_success_rate:.0f}%")
            print(f"      ‚îî‚îÄ –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–æ–≥—Ä–µ–≤: {account['last_warmup']}")
        else:
            print(f"      ‚îî‚îÄ (–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ –Ω–µ –ø—Ä–æ–≥—Ä–µ–≤–∞–ª—Å—è)")
        print()

    # ===== 4. –ü–†–û–ë–õ–ï–ú–ù–´–ï –ê–ö–ö–ê–£–ù–¢–´ =====
    print("‚îå" + "‚îÄ" * 98 + "‚îê")
    print("‚îÇ" + " 4Ô∏è‚É£  –ü–†–û–ë–õ–ï–ú–ù–´–ï –ê–ö–ö–ê–£–ù–¢–´ –ò –û–®–ò–ë–ö–ò" + " " * 64 + "‚îÇ")
    print("‚îî" + "‚îÄ" * 98 + "‚îò")
    print()

    # –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–º–æ—Ä–æ–∑–æ–∫ –∏–∑ –ª–æ–≥–æ–≤
    try:
        with open('logs/heat_up.log', 'r') as f:
            lines = f.readlines()

        frozen_errors = defaultdict(int)
        sessions_with_frozen = set()

        for line in lines:
            match = re.search(r'^(\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2})', line)
            if match:
                try:
                    log_time = datetime.strptime(match.group(1), '%Y-%m-%d %H:%M:%S')
                    if log_time < yesterday:
                        continue
                except:
                    pass
            
            if 'Session is frozen' in line or 'RPCSessionFrozen' in line:
                session_match = re.search(r'session (\d+)', line)
                if session_match:
                    session_id = session_match.group(1)
                    sessions_with_frozen.add(session_id)
                    frozen_errors[session_id] += 1

        # –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–º–æ—Ä–æ–∑–∫–∞—Ö
        if sessions_with_frozen:
            print(f"  ‚ö†Ô∏è  –í–†–ï–ú–ï–ù–ù–´–ï –ó–ê–ú–û–†–û–ó–ö–ò (Session Frozen):")
            print()
            print(f"     –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(sessions_with_frozen)} —Å–µ—Å—Å–∏–π —Å –æ—à–∏–±–∫–∞–º–∏ 'Session is frozen':")
            print()
            for session_id in sorted(sessions_with_frozen):
                count = frozen_errors[session_id]
                cursor.execute("SELECT phone_number FROM accounts WHERE session_id = ?", (session_id,))
                phone = cursor.fetchone()
                phone_str = f"({phone['phone_number']})" if phone else ""
                print(f"     ‚Ä¢ Session {session_id} {phone_str}: {count} —Ä–∞–∑(–∞)")
            print()
            print("     ‚ÑπÔ∏è  –í–ê–ñ–ù–û: –≠—Ç–æ –í–†–ï–ú–ï–ù–ù–´–ï –∑–∞–º–æ—Ä–æ–∑–∫–∏ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å.")
            print("        –ê–∫–∫–∞—É–Ω—Ç—ã –ù–ï –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –ø–æ—Å—Ç–æ—è–Ω–Ω–æ - –¥—Ä—É–≥–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è —É—Å–ø–µ—à–Ω–æ.")
            print()
        else:
            print("  ‚úÖ –í—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–º–æ—Ä–æ–∑–æ–∫ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
            print()
    except Exception as e:
        print(f"  ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥-—Ñ–∞–π–ª: {e}")
        print()

    # –ü–æ—Å—Ç–æ—è–Ω–Ω–æ –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–µ
    if frozen_accounts > 0:
        cursor.execute("""
            SELECT session_id, phone_number
            FROM accounts
            WHERE is_frozen = 1
        """)
        frozen = cursor.fetchall()
        print(f"  ‚ùÑÔ∏è  –ü–û–°–¢–û–Ø–ù–ù–û –ó–ê–ú–û–†–û–ñ–ï–ù–ù–´–ï –ê–ö–ö–ê–£–ù–¢–´ ({len(frozen)}):")
        for acc in frozen:
            print(f"     ‚Ä¢ Session {acc['session_id']} ({acc['phone_number']})")
        print()
    else:
        print("  ‚úÖ –ü–æ—Å—Ç–æ—è–Ω–Ω–æ –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ù–ï–¢")
        print()

    # –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
    if banned_accounts > 0:
        cursor.execute("""
            SELECT session_id, phone_number
            FROM accounts
            WHERE is_banned = 1
        """)
        banned = cursor.fetchall()
        print(f"  üö´ –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–ù–´–ï –ê–ö–ö–ê–£–ù–¢–´ ({len(banned)}):")
        for acc in banned:
            print(f"     ‚Ä¢ Session {acc['session_id']} ({acc['phone_number']})")
        print()
    else:
        print("  ‚úÖ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ù–ï–¢")
        print()

    # ===== 5. –¢–û–ü-5 –ê–ö–¢–ò–í–ù–´–• =====
    print("‚îå" + "‚îÄ" * 98 + "‚îê")
    print("‚îÇ" + " 5Ô∏è‚É£  TOP-5 –°–ê–ú–´–• –ê–ö–¢–ò–í–ù–´–• –ê–ö–ö–ê–£–ù–¢–û–í" + " " * 61 + "‚îÇ")
    print("‚îî" + "‚îÄ" * 98 + "‚îò")
    print()

    cursor.execute("""
        SELECT 
            a.session_id,
            a.phone_number,
            COUNT(ws.id) as warmup_count,
            SUM(ws.completed_actions_count) as total_actions,
            SUM(ws.failed_actions_count) as failed_actions
        FROM accounts a
        JOIN warmup_sessions ws ON a.id = ws.account_id
        WHERE ws.started_at >= ?
        GROUP BY a.id
        ORDER BY warmup_count DESC, total_actions DESC
        LIMIT 5
    """, (yesterday,))

    top_accounts = cursor.fetchall()

    if top_accounts:
        for idx, acc in enumerate(top_accounts, 1):
            successful = acc['total_actions'] - acc['failed_actions']
            success_rate = (successful / acc['total_actions'] * 100) if acc['total_actions'] > 0 else 0
            
            if idx == 1:
                medal = "ü•á"
            elif idx == 2:
                medal = "ü•à"
            elif idx == 3:
                medal = "ü•â"
            else:
                medal = f"  {idx}"
            
            print(f"  {medal} Session {acc['session_id']} ({acc['phone_number']})")
            print(f"      –ü—Ä–æ–≥—Ä–µ–≤–æ–≤: {acc['warmup_count']}, –î–µ–π—Å—Ç–≤–∏–π: {acc['total_actions']} (Success rate: {success_rate:.0f}%)")
            print()
    else:
        print("  –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞")
        print()

    # ===== –ò–¢–û–ì–ò =====
    print("‚îå" + "‚îÄ" * 98 + "‚îê")
    print("‚îÇ" + " üìå –í–´–í–û–î–´" + " " * 87 + "‚îÇ")
    print("‚îî" + "‚îÄ" * 98 + "‚îò")
    print()

    print(f"  ‚úÖ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≥—Ä–µ—Ç–æ {warmed_accounts} –∏–∑ {total_accounts} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
    print(f"  ‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ {total_warmups} —Å–µ–∞–Ω—Å–æ–≤ –ø—Ä–æ–≥—Ä–µ–≤–∞ —Å {successful_actions} —É—Å–ø–µ—à–Ω—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏")
    print(f"  ‚úÖ –û–±—â–∏–π success rate: {success_rate:.1f}%")
    print()

    if frozen_accounts > 0 or banned_accounts > 0:
        print(f"  ‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã:")
        if frozen_accounts > 0:
            print(f"      ‚Ä¢ –ü–æ—Å—Ç–æ—è–Ω–Ω–æ –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {frozen_accounts}")
        if banned_accounts > 0:
            print(f"      ‚Ä¢ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {banned_accounts}")
        print()
    else:
        print(f"  ‚úÖ –ü–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –∏ –∑–∞–º–æ—Ä–æ–∑–æ–∫ –ù–ï –û–ë–ù–ê–†–£–ñ–ï–ù–û")
        print()

    try:
        if sessions_with_frozen:
            print(f"  ‚ÑπÔ∏è  –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–º–æ—Ä–æ–∑–∫–∏ —É {len(sessions_with_frozen)} —Å–µ—Å—Å–∏–π - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ")
            print(f"      (–æ—à–∏–±–∫–∏ –ø—Ä–∏ update_profile, –¥—Ä—É–≥–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è)")
            print()
    except:
        pass

    print("‚ïî" + "‚ïê" * 98 + "‚ïó")
    print("‚ïë" + " " * 42 + "–ö–û–ù–ï–¶ –û–¢–ß–ï–¢–ê" + " " * 44 + "‚ïë")
    print("‚ïö" + "‚ïê" * 98 + "‚ïù")
    print()

    conn.close()

if __name__ == "__main__":
    try:
        generate_report()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
        import traceback
        traceback.print_exc()

